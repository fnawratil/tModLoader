--- src/decompiled\Terraria\Main.cs
+++ src/merged\Terraria\Main.cs
@@ -4,6 +_,7 @@
 using Microsoft.Xna.Framework.Content;
 using Microsoft.Xna.Framework.Graphics;
 using Microsoft.Xna.Framework.Input;
+using SDL2;
 using ReLogic.Graphics;
 using ReLogic.Localization.IME;
 using ReLogic.OS;
@@ -15,6 +_,7 @@
 using System.IO;
 using System.Linq;
 using System.Reflection;
+using System.Runtime.CompilerServices;
 using System.Runtime.InteropServices;
 using System.Text;
 using System.Threading;
@@ -51,10 +_,17 @@
 using Terraria.UI.Gamepad;
 using Terraria.Utilities;
 using Terraria.World.Generation;
+#if SERVER
+using Terraria.Server;
+#endif
 
 namespace Terraria
 {
+#if CLIENT
 	public class Main : Game
+#else
+	public class Main : Terraria.Server.Game
+#endif
 	{
 		public delegate void OnPlayerSelected(PlayerFileData player);
 
@@ -4398,6 +_,7 @@
 				LockOnHelper.UseMode = LockOnHelper.LockOnMode.ThreeDS;
 			}
 			Main.Configuration.Get<bool>("InvisibleCursorForGamepad", ref Main.InvisibleCursorForGamepad);
+#if CLIENT && XNA
 			Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
 			if (Main.screenBorderless)
 			{
@@ -4413,6 +_,7 @@
 			{
 				form.FormBorderStyle = FormBorderStyle.Sizable;
 			}
+#endif
 			Main.SetDisplayMode(preferredBackBufferWidth, preferredBackBufferHeight, fullscreen);
 			Main.Configuration.Get<bool>("SettingsUnlock_WorldEvil", ref Main.SettingsUnlock_WorldEvil);
 			Main.Configuration.Get<bool>("SettingsEnabled_MinersWobble", ref Main.SettingsEnabled_MinersWobble);
@@ -4617,8 +_,10 @@
 								}
 								if (num >= 91 && binaryReader.ReadBoolean())
 								{
+#if CLIENT && XNA
 									Form form = (Form)Control.FromHandle(base.Window.Handle);
 									form.WindowState = FormWindowState.Maximized;
+#endif
 								}
 								if (num >= 4)
 								{
@@ -4731,8 +_,14 @@
 			{
 				if (!Main.WorldList[i].IsCloudSave)
 				{
+					if(PlatformUtilities.IsWindows)
+					{
 					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path);
 					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path + ".bak");
+					}else{
+					File.Delete(Main.WorldList[i].Path);
+					File.Delete(Main.WorldList[i].Path + ".bak");
+					}
 				}
 				else if (SocialAPI.Cloud != null)
 				{
@@ -5164,10 +_,13 @@
 			{
 				string text = "terraria" + Main.rand.Next(2147483647);
 				Console.Title = text;
+				if(PlatformUtilities.IsWindows)
+				{
 				IntPtr intPtr = Main.FindWindow(null, text);
 				if (intPtr != IntPtr.Zero)
 				{
 					Main.ShowWindow(intPtr, 0);
+				}
 				}
 			}
 			else
@@ -6068,14 +_,18 @@
 		public Main()
 		{
 			Main.instance = this;
+#if CLIENT
 			Main.graphics = new GraphicsDeviceManager((Game)this);
 			base.Content.RootDirectory = "Content";
+#endif
 		}
 
 		protected void SetTitle()
 		{
+#if CLIENT
 			Main._cachedTitle = Lang.GetRandomGameTitle();
 			Platform.Current.SetWindowUnicodeTitle(base.Window, Main._cachedTitle);
+#endif
 		}
 
 		public static void InitLifeBytes()
@@ -6139,6 +_,9 @@
 
 		protected override void Initialize()
 		{
+#if SERVER
+			Main.netMode = 2;
+#endif
 			Main.LocalFavoriteData.Load();
 			Main.CloudFavoritesData.Load();
 			Main.FindAnnouncementBoxStatus();
@@ -6153,9 +_,14 @@
 			TileEntity.InitializeAll();
 			Projectile.InitializeStaticThings();
 			Main.InitializeItemAnimations();
+#if CLIENT
 			Lighting.Initialize(false);
 			MapHelper.Initialize();
 			TimeLogger.Initialize();
+#else
+			Mount.Initialize();
+			Minecart.Initialize();
+#endif
 			WorldGen.RandomizeBackgrounds();
 			WorldGen.RandomizeCaveBackgrounds();
 			WorldGen.RandomizeMoonState();
@@ -8654,13 +_,17 @@
 				Main.ActivePlayerFileData.StartPlayTimer();
 				Player.Hooks.EnterWorld(Main.myPlayer);
 			}
-			else
+#if CLIENT
+			else if(PlatformUtilities.IsWindows)
 			{
 				IntPtr systemMenu = Main.GetSystemMenu(base.Window.Handle, false);
 				int menuItemCount = Main.GetMenuItemCount(systemMenu);
 				Main.RemoveMenu(systemMenu, menuItemCount - 1, 1024);
 			}
+#endif
+#if CLIENT
 			this.ClientInitialize();
+#endif
 		}
 
 		private void ClientInitialize()
@@ -8706,6 +_,7 @@
 			this.OpenRecent();
 			Star.SpawnStars();
 			WorldGen.RandomizeWeather();
+#if CLIENT
 			this._achievements = new AchievementManager();
 			AchievementInitializer.Load();
 			DyeInitializer.Load();
@@ -8713,6 +_,7 @@
 			AchievementCompleteUI.Initialize();
 			UILinksInitializer.Load();
 			ItemSorting.SetupWhiteLists();
+#endif
 			foreach (DisplayMode current in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
 			{
 				if (current.Width >= Main.minScreenW && current.Height >= Main.minScreenH && current.Width <= Main.maxScreenW && current.Height <= Main.maxScreenH)
@@ -9809,6 +_,28 @@
 
 		protected void UpdateAudio()
 		{
+			if (Main.engine != null)
+			{
+				Main.engine.Update();
+			}
+			object audioLock = Main._audioLock;
+			lock (audioLock)
+			{
+				for (int i = 0; i < Main.ActiveSoundInstances.Count; i++)
+				{
+					if (Main.ActiveSoundInstances[i] == null)
+					{
+						Main.ActiveSoundInstances.RemoveAt(i);
+						i--;
+					}
+					else if (Main.ActiveSoundInstances[i].State == SoundState.Stopped)
+					{
+						Main.ActiveSoundInstances[i].Dispose();
+						Main.ActiveSoundInstances.RemoveAt(i);
+						i--;
+					}
+				}
+			}
 			if (!Main.dedServ)
 			{
 				bool flag = (!Main.hasFocus || Main.gamePaused) && Main.netMode == 0;
@@ -13271,10 +_,12 @@
 			PlayerInput.SetZoom_Unscaled();
 			Main.MouseOversTryToClear();
 			PlayerInput.ResetInputsOnActiveStateChange();
+#if CLIENT
 			if (Main.OnTick != null)
 			{
 				Main.OnTick();
 			}
+#endif
 			if (Main._hasPendingNetmodeChange)
 			{
 				Main.netMode = Main._targetNetMode;
@@ -13508,7 +_,9 @@
 					Liquid.cycles = 1;
 				}
 				Main.hasFocus = base.IsActive;
+#if XNA
 				Main.hasFocus = (Form.ActiveForm == Control.FromHandle(base.Window.Handle) as Form);
+#endif
 				if (!Main.gameMenu || Main.netMode == 2)
 				{
 					WorldFile.tempRaining = Main.raining;
@@ -15588,6 +_,7 @@
 
 		public static string GetInputText(string oldString)
 		{
+#if CLIENT
 			if (!Main.hasFocus)
 			{
 				return oldString;
@@ -15705,6 +_,9 @@
 				}
 			}
 			return text;
+#else
+			return "";
+#endif
 		}
 
 		public void MouseTextHackZoom(string text)
@@ -43882,8 +_,12 @@
 		protected void QuitGame()
 		{
 			Main.SaveSettings();
+#if CLIENT
 			SocialAPI.Shutdown();
+#endif
 			base.Exit();
+			if(PlatformUtilities.IsOSX)
+			SDL.SDL_DestroyWindow(base.Window.Handle);
 		}
 
 		protected Microsoft.Xna.Framework.Color randColor()
@@ -44645,6 +_,17 @@
 							"\" -lang ",
 							Language.ActiveCulture.LegacyId
 						});
+						if(PlatformUtilities.IsLinux)
+						{
+						if (IntPtr.Size == 8)
+						{
+							text += " -x64";
+						}
+						else
+						{
+							text += " -x86";
+						}
+						}
 						if (Main.ActiveWorldFileData.IsCloudSave)
 						{
 							text = text + " -cloudworld \"" + Main.worldPathName + "\"";
@@ -44653,7 +_,7 @@
 						{
 							text = text + " -world \"" + Main.worldPathName + "\"";
 						}
-						this.tServer.StartInfo.FileName = "TerrariaServer.exe";
+						this.tServer.StartInfo.FileName = PlatformUtilities.IsWindows?"TerrariaServer.exe":"TerrariaServer";
 						this.tServer.StartInfo.Arguments = text;
 						if (Main.libPath != "")
 						{
@@ -46080,6 +_,7 @@
 						{
 							array7[num27] = 0.85f;
 						}
+#if XNA
 						bool flag7 = true;
 						Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
 						System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
@@ -46087,6 +_,9 @@
 						{
 							flag7 = false;
 						}
+#else
+						bool flag7 = false;
+#endif
 						num2 = 210;
 						num4 = 55;
 						int num28 = 0;
@@ -50319,7 +_,11 @@
 			base.GraphicsDevice.SetRenderTarget(this.backWaterTarget);
 			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
 			Main.spriteBatch.Begin();
+#if UNSAFE_VERSION
 			Main.tileBatch.Begin();
+#else
+			Main.tileBatch.Begin(SpriteSortMode.Texture, BlendState.AlphaBlend);
+#endif
 			try
 			{
 				this.drawWaters(true, -1, true);
@@ -57386,6 +_,7 @@
 
 		private static void CheckMonoliths()
 		{
+#if CLIENT
 			bool flag = Main.player[Main.myPlayer].ZoneTowerVortex || Main.player[Main.myPlayer].ZoneTowerNebula || Main.player[Main.myPlayer].ZoneTowerStardust || Main.player[Main.myPlayer].ZoneTowerSolar;
 			for (int i = 0; i < Main.MonolithFilterNames.Length; i++)
 			{
@@ -57412,6 +_,7 @@
 					}
 				}
 			}
+#endif
 		}
 
 		private void GraphicsDeviceLost(object sender, EventArgs evt)
@@ -57479,7 +_,9 @@
 			{
 				Main.maxQ = true;
 			}
+#if CLIENT
 			this.UpdateDisplaySettings();
+#endif
 			if (Main.OnPreDraw != null)
 			{
 				Main.OnPreDraw(gameTime);
@@ -60538,6 +_,7 @@
 			BirthdayParty.UpdateTime();
 			Sandstorm.UpdateTime();
 			DD2Event.UpdateTime();
+#if CLIENT
 			if (NPC.MoonLordCountdown > 0)
 			{
 				float num5 = MathHelper.Clamp((float)Math.Sin((double)((float)NPC.MoonLordCountdown / 60f * 0.5f)) * 2f, 0f, 1f);
@@ -60552,6 +_,7 @@
 			{
 				Filters.Scene.Deactivate("MoonLordShake", new object[0]);
 			}
+#endif
 			if (NPC.MoonLordCountdown > 0)
 			{
 				NPC.MoonLordCountdown--;
@@ -61425,6 +_,7 @@
 		public static void PlaySoundInstance(SoundEffectInstance sound)
 		{
 			sound.Play();
+			ActiveSoundInstances.Add(sound);
 		}
 
 		public static ActiveSound GetActiveSound(SlotId id)
@@ -61490,6 +_,9 @@
 
 		public static SoundEffectInstance PlaySound(int type, int x = -1, int y = -1, int Style = 1, float volumeScale = 1f, float pitchOffset = 0f)
 		{
+			object audioLock = Main._audioLock;
+			lock (audioLock)
+			{
 			int num = Style;
 			try
 			{
@@ -62207,6 +_,7 @@
 			{
 			}
 			return null;
+			}
 		}
 
 		public static void ClearPendingPlayerSelectCallbacks()
@@ -62277,6 +_,7 @@
 			{
 				Main.graphics.ToggleFullScreen();
 			}
+#if XNA
 			Main.screenMaximized = (((Form)Control.FromHandle(Main.instance.Window.Handle)).WindowState == FormWindowState.Maximized);
 			if (Main.screenBorderless && Main.screenMaximized && !Main.graphics.IsFullScreen)
 			{
@@ -62285,6 +_,9 @@
 			}
 			Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
 			bool flag = form.FormBorderStyle == FormBorderStyle.None;
+#else
+			Main.screenMaximized = false;
+#endif
 			if (!Main.instance.IsActive && (Main.screenBorderless || Main.screenMaximized || Main.graphics.IsFullScreen))
 			{
 				return;
@@ -62294,6 +_,7 @@
 			int num4;
 			if (Main.screenBorderless || Main.screenMaximized || Main.graphics.IsFullScreen)
 			{
+#if XNA
 				form.MinimumSize = new Size(0, 0);
 				if (Main.screenBorderless && !Main.graphics.IsFullScreen && Main.screenBorderlessPendingResizes > 0)
 				{
@@ -62302,6 +_,7 @@
 					width = bounds.Width;
 					height = bounds.Height;
 				}
+#endif
 				if (width > Main.maxScreenW)
 				{
 					float num = (float)height / (float)width;
@@ -62318,9 +_,12 @@
 				{
 					num3 = Math.Max(Main.graphics.PreferredBackBufferWidth, Main.graphics.GraphicsDevice.Viewport.Width);
 					num4 = Math.Max(Main.graphics.PreferredBackBufferHeight, Main.graphics.GraphicsDevice.Viewport.Height);
-					if (num3 != Main.graphics.PreferredBackBufferWidth || num4 != Main.graphics.PreferredBackBufferHeight)
-					{
-						flag2 = true;
+					uint pixelDifference=Math.Abs(Main.graphics.PreferredBackBufferWidth-num3)+Math.Abs(Main.graphics.PreferredBackBufferHeight-num4);
+					flag2=pixelDifference>1;
+					if(!flag2)
+					{
+						num3=Main.graphics.PreferredBackBufferWidth;
+						num4=Main.graphics.PreferredBackBufferHeight;
 					}
 				}
 				else
@@ -62331,18 +_,27 @@
 			}
 			else
 			{
+#if XNA
 				form.MinimumSize = new Size(Main.minScreenW, Main.minScreenH);
 				if (flag)
 				{
 					width = Main.displayWidth[0];
 					height = Main.displayHeight[0];
 				}
+#endif
 				width = Math.Min(width, Main.maxScreenW);
 				height = Math.Min(height, Main.maxScreenH);
 				num3 = Main.graphics.GraphicsDevice.Viewport.Width;
 				num4 = Main.graphics.GraphicsDevice.Viewport.Height;
-				flag2 = (Main.graphics.PreferredBackBufferWidth != Main.graphics.GraphicsDevice.Viewport.Width || Main.graphics.PreferredBackBufferHeight != Main.graphics.GraphicsDevice.Viewport.Height);
-			}
+				uint pixelDifference=Math.Abs(Main.graphics.PreferredBackBufferWidth-Main.graphics.GraphicsDevice.Viewport.Width)+Math.Abs(Main.graphics.PreferredBackBufferHeight-Main.graphics.GraphicsDevice.Viewport.Height);
+				flag2=pixelDifference>1;
+				if(!flag2)
+				{
+					num3=Main.graphics.PreferredBackBufferWidth;
+					num4=Main.graphics.PreferredBackBufferHeight;
+				}
+			}
+#if XNA
 			if (!fullscreen && !flag2)
 			{
 				if (form.ClientSize.Width < Main.graphics.PreferredBackBufferWidth)
@@ -62356,6 +_,7 @@
 					flag2 = true;
 				}
 			}
+#endif
 			width &= 2147483646;
 			height &= 2147483646;
 			width = Math.Max(width, Main.minScreenW);
@@ -62381,6 +_,7 @@
 				Main.PendingResolutionWidth = Main.screenWidth;
 				Main.PendingResolutionHeight = Main.screenHeight;
 				PlayerInput.CacheOriginalScreenDimensions();
+#if XNA
 				if (!fullscreen)
 				{
 					form.SendToBack();
@@ -62402,6 +_,7 @@
 						form.FormBorderStyle = FormBorderStyle.Sizable;
 					}
 				}
+#endif
 				Lighting.Initialize(true);
 				if (!Main.drawToScreen)
 				{

